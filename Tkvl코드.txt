//애너그램 구하기(자바)

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));

        int count = 0;
        
        String word1 = bufferedReader.readLine();
        String word2 = bufferedReader.readLine();

        char[] sortedWord1 = word2.toCharArray();
        
        Arrays.sort(sortedWord1);

        word2 = String.valueOf(sortedWord1);

        for (int i = 0; i < word1.length() - word2.length() + 1; i++) {
            char[] sortedWord2 = new char[word2.length()];
            String resultWord2;

            for (int j = i; j < i + word2.length(); j++) {
                sortedWord2[j - i] = word1.charAt(j);
            }

            Arrays.sort(sortedWord2);
            resultWord2 = String.valueOf(sortedWord2);

            if (resultWord2.equals(word2)) {
                count++;
            }
        }
        System.out.println(count);
    }
}

#주어진 숫자에 0~9중 특정 숫자 몇개 들어있는지(파이썬)
print(str(list(range(22))).count('1'))


//전구스위치 몇번 눌러야 모두 0되는지(자바)
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {

	static int size, count = 0;
	static boolean[] origin, target, copy;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		size = Integer.parseInt(br.readLine());
		origin = new boolean[size + 2];
		target = new boolean[size + 2];

		char[] input = br.readLine().toCharArray();
		for (int i = 1; i <= size; i++) {
			if (input[i - 1] == '1') {
				origin[i] = true;
			}
		}
		input = br.readLine().toCharArray();
		for (int i = 1; i <= size; i++) {
			if (input[i - 1] == '1') {
				target[i] = true;
			}
		}

		simulation();

	}

	private static void simulation() {
		count = 0;
		if (isPossible()) { // 원본 그대로일때
			System.out.println(count);
			return;
		}
//		print();
		change(1, false);
		count = 1;
		if (isPossible()) { // 1번 스위치만 누름
			System.out.println(count);
			return;
		}
		System.out.println(-1);
//		print();
	}

	private static boolean isPossible() {
		copy = origin.clone();

		for (int i = 2; i < size; i++) {
			if (copy[i - 1] != target[i - 1]) {
				count++;
				change(i, true);
			}
		}
		if (copy[size - 1] != target[size - 1]) { // N번째 스위치 눌러야되나?
			copy[size - 1] = target[size - 1];
			if (copy[size]) {
				copy[size] = false;
			} else {
				copy[size] = true;
			}
			count++;
		}

		for (int i = 1; i <= size; i++) {
			if (copy[i] != target[i]) {
				return false;
			}
		}
		return true;
	}

	private static void change(int index, boolean flag) {
		if (flag) {
			for (int i = 0; i < 3; i++) {
				if (copy[index - 1 + i]) {
					copy[index - 1 + i] = false;
				} else {
					copy[index - 1 + i] = true;
				}
			}
		} else {
			for (int i = 0; i < 3; i++) {
				if (origin[index - 1 + i]) {
					origin[index - 1 + i] = false;
				} else {
					origin[index - 1 + i] = true;
				}
			}
		}
	}

	private static void print() {
		for (int i = 1; i <= size; i++) {
			System.out.print(copy[i] ? '1' : '0');
		}
		System.out.println();
	}

}


# 시험장 위치에 따른 최소 위치, 최소 이동거리(파이썬)
import numpy as np

a = np.array([19,2,66,80,82,12,120,51])
b = []

min_distance = 100000
loc = 0

for i in range(min(a), max(a)+1):
    temp = 0
    for j in range(len(a)):
        temp = temp + abs(a[j] - i)
    b.append(temp)
    
    if temp < min_distance:
        min_distance = temp
        loc = i
    
print("최소거리 : ", min_distance)
print("배열 b의 최소거리 : ", min(b))
print("최소거리에 해당하는 위치 :", loc)
print(b)


# 


